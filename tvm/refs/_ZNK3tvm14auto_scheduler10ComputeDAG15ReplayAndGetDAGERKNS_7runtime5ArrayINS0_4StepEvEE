<dec f='tvm/include/tvm/auto_scheduler/compute_dag.h' l='305' type='tvm::auto_scheduler::ComputeDAG tvm::auto_scheduler::ComputeDAG::ReplayAndGetDAG(const Array&lt;tvm::auto_scheduler::Step&gt; &amp; steps) const'/>
<doc f='tvm/include/tvm/auto_scheduler/compute_dag.h' l='296'>/*!
   * \brief Since some steps may change the ComputeDAG (e.g. CacheRead/CacheWrite), the initial
   * ComputeDAG may not be up-to-date. This function replays the given transform steps from the
   * initial state and returns an up-to-date ComputeDAG.
   * \param steps The steps to be replayed. Usually we&apos;ll filter out the unused steps to speed up
   * the replay process, since we only intend to get a ComputeDAG with the up-to-date op stage
   * structure.
   * \return The up-to-date ComputeDAG.
   */</doc>
<def f='tvm/src/auto_scheduler/compute_dag.cc' l='1383' ll='1387' type='tvm::auto_scheduler::ComputeDAG tvm::auto_scheduler::ComputeDAG::ReplayAndGetDAG(const Array&lt;tvm::auto_scheduler::Step&gt; &amp; transform_steps) const'/>
<use f='tvm/src/auto_scheduler/transform_step.cc' l='1546' u='c' c='_ZNK3tvm14auto_scheduler17CacheReadStepNode12ApplyToStateEPNS0_5StateERKNS0_10ComputeDAGE'/>
<use f='tvm/src/auto_scheduler/transform_step.cc' l='1656' u='c' c='_ZNK3tvm14auto_scheduler18CacheWriteStepNode12ApplyToStateEPNS0_5StateERKNS0_10ComputeDAGE'/>
<use f='tvm/src/auto_scheduler/transform_step.cc' l='1786' u='c' c='_ZNK3tvm14auto_scheduler15RfactorStepNode12ApplyToStateEPNS0_5StateERKNS0_10ComputeDAGE'/>
