<dec f='tvm/include/tvm/tir/schedule/schedule.h' l='505' type='void tvm::tir::ScheduleNode::ReverseComputeInline(const tvm::tir::BlockRV &amp; block)'/>
<doc f='tvm/include/tvm/tir/schedule/schedule.h' l='494'>/*!
   * \brief Inline a block into its only producer. It requires:
   * 1) The block is a complete non-root block, which only produces and consumers one buffer
   * 2) The block must not be the only leaf in the scope.
   * 3) The only producer of the block is a read-after-write producer and a complete non-root block
   * 4) The body of the block must be a BufferStore statement in the form of,
   *    B[f(i, j, k, ...)] = g(i, j, k, A[i, j, k, ...] ...)
   * where the indices of each `BufferLoad` on the RHS are all distinct atomic variables,
   * and no variables other than those indexing variables are allowed in the statement.
   * \param block The block to be inlined to its producer
   */</doc>
<use f='tvm/src/meta_schedule/schedule_rule/auto_inline.cc' l='58' u='c' c='_ZN3tvm13meta_schedule14AutoInlineNode5ApplyERKNS_3tir8ScheduleERKNS2_7BlockRVE'/>
<use f='tvm/src/meta_schedule/schedule_rule/multi_level_tiling_tensor_core.cc' l='268' u='c' c='_ZNK3tvm13meta_schedule30MultiLevelTilingTensorCoreNode23AddWriteReuseTensorCoreENS0_15TensorCoreStateE'/>
<use f='tvm/src/meta_schedule/trace_apply.cc' l='168' u='c' c='_ZN3tvm13meta_schedule16ApplyAnchorTraceENS_3tir8ScheduleENS1_5TraceE'/>
<use f='tvm/src/meta_schedule/trace_apply.cc' l='239' u='c' c='_ZN3tvm13meta_schedule24ScheduleUsingAnchorTraceENS_3tir8ScheduleERKNS1_5TraceERKNS_6TargetE'/>
<ovr f='tvm/src/tir/schedule/concrete_schedule.cc' l='654' c='_ZN3tvm3tir20ConcreteScheduleNode20ReverseComputeInlineERKNS0_7BlockRVE'/>
<use f='tvm/src/tir/schedule/primitive/compute_inline.cc' l='918' u='c' c='_ZN3tvm3tir26ReverseComputeInlineTraits23UnpackedApplyToScheduleENS0_8ScheduleENS0_7BlockRVE'/>
<use f='tvm/src/tir/schedule/schedule.cc' l='199' u='a'/>
