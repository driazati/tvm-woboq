<def f='tvm/src/tir/schedule/primitive/reduction.cc' l='627' ll='790'/>
<ovr f='tvm/src/tir/schedule/primitive/reduction.cc' l='814' c='tvm::tir::RFactorBlockCreator'/>
<use f='tvm/src/tir/schedule/primitive/reduction.cc' l='814'/>
<use f='tvm/src/tir/schedule/primitive/reduction.cc' l='821' c='_ZN3tvm3tir19RFactorBlockCreatorC1ENS0_12BlockRealizeENS0_3ForENS_7runtime5ArrayINS0_11BufferStoreEvEENS0_11CommReducerENS5_INS0_6BufferEvEESt13unorde4725904'/>
<ovr f='tvm/src/tir/schedule/primitive/reduction.cc' l='937' c='tvm::tir::WriteBackBlockCreator'/>
<use f='tvm/src/tir/schedule/primitive/reduction.cc' l='937'/>
<use f='tvm/src/tir/schedule/primitive/reduction.cc' l='944' c='_ZN3tvm3tir21WriteBackBlockCreatorC1ENS0_12BlockRealizeENS0_3ForENS_7runtime5ArrayINS0_11BufferStoreEvEENS0_11CommReducerENS5_INS0_6BufferEvEENS0_7Ite3424326'/>
<size>200</size>
<doc f='tvm/src/tir/schedule/primitive/reduction.cc' l='619'>/*!
 * \brief The base class of the rfactor/write-back block creator, which creates the blocks in four
 * steps:
 * 1) Create the new block iters and the their iter bindings
 * 2) Create the body and init of the new block
 * 3) Create the read/write regions of the new block
 * 4) Create the new block and the new block-realize
 */</doc>
<fun r='_ZN3tvm3tir16BaseBlockCreator20CreateAdditionalIterEv'/>
<fun r='_ZN3tvm3tir16BaseBlockCreator17CreateNormalItersEi'/>
<fun r='_ZN3tvm3tir16BaseBlockCreator10PreProcessEv'/>
<fun r='_ZN3tvm3tir16BaseBlockCreator22CreateReadWriteRegionsEv'/>
