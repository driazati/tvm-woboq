<dec f='tvm/src/arith/transitive_comparison_analyzer.cc' l='217' type='std::vector&lt;Comparison&gt; tvm::arith::TransitiveComparisonAnalyzer::Impl::CollectDirectComparisons(tvm::arith::TransitiveComparisonAnalyzer::Impl::Key lhs_key, tvm::arith::TransitiveComparisonAnalyzer::Impl::Key rhs_key) const'/>
<use f='tvm/src/arith/transitive_comparison_analyzer.cc' l='638' u='c' c='_ZNK3tvm5arith28TransitiveComparisonAnalyzer4Impl10TryCompareERKNS_8PrimExprES5_b'/>
<def f='tvm/src/arith/transitive_comparison_analyzer.cc' l='644' ll='664' type='std::vector&lt;TransitiveComparisonAnalyzer::Impl::Comparison&gt; tvm::arith::TransitiveComparisonAnalyzer::Impl::CollectDirectComparisons(tvm::arith::TransitiveComparisonAnalyzer::Impl::Key lhs_key, tvm::arith::TransitiveComparisonAnalyzer::Impl::Key rhs_key) const'/>
<doc f='tvm/src/arith/transitive_comparison_analyzer.cc' l='204'>/*! Collect known comparisons between LHS and RHS, without propagation
   *
   * Allows the internal representation to handle any constant
   * offsets, without searching for a sequence of inequalities.
   *
   * \param lhs_key The left-hand side of the comparison
   *
   * \param rhs_key The right-hand side of the comparison
   *
   * \returns A subset of `knowns_` and `scoped_knowns_`, filtered to
   * only include comparisons between `lhs_key` and `rhs_key`,
   * normalized such that `lhs_key` is on the left-hand side.
   */</doc>
