<dec f='tvm/src/target/llvm/llvm_instance.h' l='124' type='std::unique_ptr&lt;llvm::Module&gt; tvm::codegen::LLVMInstance::LoadIR(const std::string &amp; file_name) const'/>
<use f='tvm/src/target/llvm/codegen_amdgpu.cc' l='272' u='c' c='_ZN3tvm7codegen11BuildAMDGPUENS_8IRModuleENS_6TargetE'/>
<doc f='tvm/src/target/llvm/llvm_instance.h' l='115'>/*!
   * \brief Load `llvm::Module` from a given file
   *
   * Read the file \param file_name, and return the `llvm::Module`.
   * At the moment this function will abort if reading of the file or creation
   * of the module fails.
   * \param file_name file with the LLVM IR assembly or bitcode
   * \return created `llvm::Module`
   */</doc>
<use f='tvm/src/target/llvm/codegen_llvm.cc' l='319' u='c' c='_ZN3tvm7codegen11CodeGenLLVM12HandleImportERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE'/>
<use f='tvm/src/target/llvm/codegen_nvptx.cc' l='321' u='c' c='_ZN3tvm7codegen10BuildNVPTXENS_8IRModuleENS_6TargetE'/>
<def f='tvm/src/target/llvm/llvm_instance.cc' l='123' ll='130' type='std::unique_ptr&lt;llvm::Module&gt; tvm::codegen::LLVMInstance::LoadIR(const std::string &amp; file_name) const'/>
<use f='tvm/src/target/llvm/llvm_module.cc' l='345' u='c' c='_ZN3tvm7codegen14LLVMModuleNode6LoadIRERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE'/>
