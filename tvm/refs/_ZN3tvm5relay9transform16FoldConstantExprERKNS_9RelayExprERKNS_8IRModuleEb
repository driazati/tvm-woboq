<dec f='tvm/src/relay/transforms/fold_constant.h' l='50' type='tvm::relay::Expr tvm::relay::transform::FoldConstantExpr(const tvm::relay::Expr &amp; expr, const tvm::IRModule &amp; mod, bool fold_qnn)'/>
<doc f='tvm/src/relay/transforms/fold_constant.h' l='42'>/*!
 * \brief Returns \p expr with any constants expressions evaluated and let-bound constants
 * inlined. Returns \p expr unchanged if no change.
 *
 * CAUTION: The importers rely on this function returning \p expr unchanged to preserve sharing
 * from their p.o.v. Furthermore, this function can be called before conversion to ANF so
 * we must avoid all recursion.
 */</doc>
<def f='tvm/src/relay/transforms/fold_constant.cc' l='421' ll='427' type='tvm::relay::Expr tvm::relay::transform::FoldConstantExpr(const tvm::relay::Expr &amp; expr, const tvm::IRModule &amp; mod, bool fold_qnn)'/>
<use f='tvm/src/relay/transforms/fold_constant.cc' l='431' u='c' c='_ZN3tvm5relay9transform16FoldConstantExprERKNS_9RelayExprEb'/>
<use f='tvm/src/relay/transforms/fold_constant.cc' l='436' u='c'/>
<use f='tvm/src/relay/transforms/fold_constant.cc' l='442' u='c' c='_ZN3tvm5relay9transform12FoldConstantEb'/>
