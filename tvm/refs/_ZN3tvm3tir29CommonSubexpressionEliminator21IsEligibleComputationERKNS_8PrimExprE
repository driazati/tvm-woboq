<dec f='tvm/src/tir/transforms/common_subexpr_elim.h' l='84' type='static bool tvm::tir::CommonSubexpressionEliminator::IsEligibleComputation(const tvm::PrimExpr &amp; expr)'/>
<def f='tvm/src/tir/transforms/common_subexpr_elim.cc' l='85' ll='102' type='static bool tvm::tir::CommonSubexpressionEliminator::IsEligibleComputation(const tvm::PrimExpr &amp; expr)'/>
<use f='tvm/src/tir/transforms/common_subexpr_elim.cc' l='237' u='a' c='_ZN3tvm3tir29CommonSubexpressionEliminator9VisitExprERKNS_8PrimExprE'/>
<use f='tvm/src/tir/transforms/common_subexpr_elim.cc' l='264' u='c' c='_ZN3tvm3tir29CommonSubexpressionEliminator9VisitExprERKNS_8PrimExprE'/>
<use f='tvm/src/tir/transforms/common_subexpr_elim.cc' l='337' u='a' c='_ZN3tvm3tir29CommonSubexpressionEliminator9VisitExprERKNS_8PrimExprE'/>
<use f='tvm/src/tir/transforms/common_subexpr_elim.cc' l='417' u='a' c='_ZN3tvm3tir29CommonSubexpressionEliminator9VisitStmtERKNS0_4StmtE'/>
<use f='tvm/src/tir/transforms/common_subexpr_elim.cc' l='444' u='c' c='_ZN3tvm3tir29CommonSubexpressionEliminator9VisitStmtERKNS0_4StmtE'/>
<use f='tvm/src/tir/transforms/common_subexpr_elim.cc' l='518' u='a' c='_ZN3tvm3tir29CommonSubexpressionEliminator9VisitStmtERKNS0_4StmtE'/>
<doc f='tvm/src/tir/transforms/common_subexpr_elim.cc' l='76'>/*!
 * \brief Predicate used for verifying that a computation is eligible for being treated by
          the CSE pass, i.e. for being introduced into a variable / for being replaced by a
          variable.
          Being eligible is a conjunction of a few conditions, like not being an atom (constant
          or variable), not being a forbidden node, not containing a forbidden node, etc.
 * \param expr The expression to check
 * \return Whether `expr` is an eligible computation or not
 */</doc>
