<inh f='tvm/src/tir/schedule/primitive/reduction.cc' l='627' c='tvm::tir::BaseBlockCreator'/>
<def f='tvm/src/tir/schedule/primitive/reduction.cc' l='814' ll='931'/>
<use f='tvm/src/tir/schedule/primitive/reduction.cc' l='1225' c='_ZN3tvm3tir7RFactorENS0_13ScheduleStateERKNS0_8StmtSRefEi'/>
<size>336</size>
<doc f='tvm/src/tir/schedule/primitive/reduction.cc' l='792'>/*!
 * \brief The derived class of the rfactor block creator, which implements all virtual methods in
 * the base creator
 * \details Start constructing the rfactor block. The main difficulty to construct the rfactor block
 * is to create its block iters. So here we introduce the algorithm to create the block iters.
 *  1. Create a block iter for the rfactor loop. The block binding of this iter is the loop var, and
 *     the block iter is data parallel.
 *  2. For all the old block&apos;s block iters, there are two cases:
 *    (a) If it is data parallel block iter, or a reduction block iter which doesn&apos;t touch the
 *        rfactor loop, we keep it and its block binding in the rfactor block.
 *    (b) Otherwise it is a reduction block iter which touches the rfactor loop. In this case, we
 *        &quot;split&quot; the block iter into one or more new block iters and do not keep the old block
 *        var. More specifically, we create a new reduction block iter for each loop var that
 *        appears in the reduction block iter&apos;s binding (except for the rfactor loop), and the
 *        binding of the new block iter is exactly the loop var. (Note that for each loop var, we
 *        create at most one block iter, even if there are multiple old block iters which touch
 *        both this loop and the rfactor loop).
 *        Then we substitute the appearances of the old block iter with the new created block
 *        iters by recording two mappings: one maps loops vars to new created block iters which
 *        is used for binding substitution, and another maps old block iters to new expressions
 *        which is used for substitutions of the old block iters.
 */</doc>
<fun r='_ZN3tvm3tir19RFactorBlockCreator20CreateAdditionalIterEv'/>
<fun r='_ZN3tvm3tir19RFactorBlockCreator17CreateNormalItersEi'/>
<fun r='_ZN3tvm3tir19RFactorBlockCreator10PreProcessEv'/>
<fun r='_ZN3tvm3tir19RFactorBlockCreator22CreateReadWriteRegionsEv'/>
