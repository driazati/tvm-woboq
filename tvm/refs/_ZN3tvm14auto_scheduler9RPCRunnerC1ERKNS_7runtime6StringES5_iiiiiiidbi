<dec f='tvm/include/tvm/auto_scheduler/measure.h' l='451' type='void tvm::auto_scheduler::RPCRunner::RPCRunner(const tvm::runtime::String &amp; key, const tvm::runtime::String &amp; host, int port, int priority, int n_parallel, int timeout, int number, int repeat, int min_repeat_ms, double cooldown_interval, bool enable_cpu_cache_flush, int device)'/>
<doc f='tvm/include/tvm/auto_scheduler/measure.h' l='435'>/*!
   * \brief The constructor. See the corresponding class in python/tvm/auto_scheduler/measure.py
   * for more detailed parameter explanation.
   * \param key The key of the device registered in the RPC tracker.
   * \param host The host address of the RPC Tracker.
   * \param port The port of RPC Tracker.
   * \param priority The priority of this run request, larger is more prior.
   * \param n_parallel The number of tasks run in parallel.
   * \param timeout Timeout of a run.
   * \param number The number of times to run the generated code for taking average.
   * \param repeat The number of times to repeat the measurement.
   * \param min_repeat_ms The minimum duration of one repeat in milliseconds.
   * \param cooldown_interval The cool down interval between two measurements.
   * \param enable_cpu_cache_flush Whether to flush cache on CPU between repeated measurements.
   * \param device Which device to run on if multiple are available.
   */</doc>
<def f='tvm/src/auto_scheduler/measure.cc' l='157' ll='174' type='void tvm::auto_scheduler::RPCRunner::RPCRunner(const tvm::runtime::String &amp; key, const tvm::runtime::String &amp; host, int port, int priority, int n_parallel, int timeout, int number, int repeat, int min_repeat_ms, double cooldown_interval, bool enable_cpu_cache_flush, int device)'/>
<use f='tvm/src/auto_scheduler/measure.cc' l='423' u='c'/>
<doc f='tvm/src/auto_scheduler/measure.cc' l='156'>/********** RPCRunner **********/</doc>
