<def f='tvm/src/arith/detect_linear_equation.cc' l='143' ll='168' type='Array&lt;tvm::PrimExpr&gt; tvm::arith::DetectLinearEquation(const tvm::PrimExpr &amp; e, const Array&lt;tvm::tir::Var&gt; &amp; vars)'/>
<use f='tvm/src/arith/detect_linear_equation.cc' l='272' u='r'/>
<dec f='tvm/include/tvm/arith/pattern.h' l='40' type='Array&lt;tvm::PrimExpr&gt; tvm::arith::DetectLinearEquation(const tvm::PrimExpr &amp; e, const Array&lt;tir::Var&gt; &amp; vars)'/>
<use f='tvm/src/arith/solve_linear_equation.cc' l='300' u='c' c='_ZN3tvm5arith20SolveLinearEquationsERKNS0_14IntConstraintsE'/>
<doc f='tvm/include/tvm/arith/pattern.h' l='32'>/*!
 * \brief Detect if e can be rewritten as e = sum_{i=0}^{n-1} var[i] * coeff[i] + coeff[n]
 *  Where coeff[i] and base are invariant of var[j] for all i and j.
 *
 * \param e The expression to be detected.
 * \param vars List of variables to be used in detection.
 * \return [coeff[i]] if it is possible, empty array if it is not.
 */</doc>
<use f='tvm/src/arith/solve_linear_inequality.cc' l='135' u='c' c='_ZN3tvm5arith18ClassifyByPolarityERKNS_3tir3VarERKSt6vectorINS_8PrimExprESaIS6_EEPS8_SB_PS5_ISt4pairIlS6_ESaISD_EESG_PNS0_8AnalyzerE'/>
<use f='tvm/src/arith/solve_linear_inequality.cc' l='149' u='c' c='_ZN3tvm5arith18ClassifyByPolarityERKNS_3tir3VarERKSt6vectorINS_8PrimExprESaIS6_EEPS8_SB_PS5_ISt4pairIlS6_ESaISD_EESG_PNS0_8AnalyzerE'/>
<use f='tvm/src/tir/transforms/inject_copy_intrin.cc' l='114' u='c' c='_ZN3tvm3tir18CopyIntrinInjector16MatchCopyPatternENS0_4StmtEPS2_PNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE'/>
<use f='tvm/src/tir/transforms/inject_copy_intrin.cc' l='115' u='c' c='_ZN3tvm3tir18CopyIntrinInjector16MatchCopyPatternENS0_4StmtEPS2_PNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE'/>
<use f='tvm/src/tir/transforms/lower_warp_memory.cc' l='157' u='c' c='_ZN3tvm3tir20WarpStoreCoeffFinder13UpdatePatternERKNS_8PrimExprE'/>
