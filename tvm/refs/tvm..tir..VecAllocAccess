<inh f='tvm/include/tvm/tir/stmt_functor.h' l='315' c='tvm::tir::StmtExprMutator'/>
<def f='tvm/src/tir/transforms/vectorize_loop.cc' l='61' ll='152'/>
<use f='tvm/src/tir/transforms/vectorize_loop.cc' l='560' c='_ZN3tvm3tir10Vectorizer10VisitStmt_EPKNS0_12AllocateNodeE'/>
<size>144</size>
<doc f='tvm/src/tir/transforms/vectorize_loop.cc' l='53'>// Rewrite vectorized allocation access
// This is necessary for making each vector component containing its own workspace.
// Originates from Halide&apos;s loop vectorizer
//
// s[i] = s[i * lanes + var]
//
// The same principle applies when using one thread to simulate multiple context.
//</doc>
<fun r='_ZN3tvm3tir14VecAllocAccess10VisitExpr_EPKNS0_8LoadNodeE'/>
<fun r='_ZN3tvm3tir14VecAllocAccess10VisitStmt_EPKNS0_9StoreNodeE'/>
<fun r='_ZN3tvm3tir14VecAllocAccess10VisitExpr_EPKNS0_14BufferLoadNodeE'/>
<fun r='_ZN3tvm3tir14VecAllocAccess10VisitStmt_EPKNS0_15BufferStoreNodeE'/>
