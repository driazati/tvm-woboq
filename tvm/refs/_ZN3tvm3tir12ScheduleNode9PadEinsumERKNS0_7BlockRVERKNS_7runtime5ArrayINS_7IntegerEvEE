<dec f='tvm/include/tvm/tir/schedule/schedule.h' l='672' type='void tvm::tir::ScheduleNode::PadEinsum(const tvm::tir::BlockRV &amp; block_rv, const Array&lt;tvm::Integer&gt; &amp; padding)'/>
<doc f='tvm/include/tvm/tir/schedule/schedule.h' l='655'>/*!
   * \brief Pad the computation of Einsum.
   * \param block_rv The block that matches the Einsum pattern.
   * \param padding The padding for each block iter.
   * \details This schedule primitives identifies the Einsum pattern in the block body, and find its
   * producer blocks. It then pads the computation of the Einsum pattern and its producer blocks.
   * The output buffer and the producer buffer is resized according to the padding size. It requires
   * the output buffer and the producer buffer to be allocated inside the PrimFunc.
   *
   * The padding is a list of non-negative integers, each element corresponds to the padding for
   * each block iter in the order of block iters. The block and its producer blocks should have
   * trivial bindings, i.e. each block iter is bound to a single loop variable. After padding, the
   * block iter extent and the corresponding outer loop is extended by the padding size.
   *
   * The size of the producer buffers are infered from the padding size of the Einsum computation.
   * The producer buffers are padded by the initial value of the corresponding reduction.
   */</doc>
<ovr f='tvm/src/tir/schedule/concrete_schedule.cc' l='800' c='_ZN3tvm3tir20ConcreteScheduleNode9PadEinsumERKNS0_7BlockRVERKNS_7runtime5ArrayINS_7IntegerEvEE'/>
<use f='tvm/src/tir/schedule/primitive/pad_einsum.cc' l='457' u='c' c='_ZN3tvm3tir15PadEinsumTraits23UnpackedApplyToScheduleENS0_8ScheduleENS0_7BlockRVENS_7runtime5ArrayINS_7IntegerEvEE'/>
<use f='tvm/src/tir/schedule/schedule.cc' l='270' u='a'/>
