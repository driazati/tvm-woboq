<dec f='tvm/include/tvm/tir/schedule/schedule.h' l='520' type='tvm::tir::BlockRV tvm::tir::ScheduleNode::RFactor(const tvm::tir::LoopRV &amp; loop_rv, int factor_axis)'/>
<doc f='tvm/include/tvm/tir/schedule/schedule.h' l='503'>/*!
   * \brief Factorize an associative reduction block by the specified loop.
   * \details An associative reduction cannot be parallelized directly,
   * because it leads to potential race condition during accumulation.
   * Alternatively, the reduction could be factorized on a loop with the following steps:
   * - Step 1: evenly slice the reduction into `n` separate chunks, where `n` is the loop extent
   * - Step 2: compute the chunks separately and write the result into `n` intermediate buffers;
   * - Step 3: accumulate the `n` separate buffer into the result buffer.
   * Note that the Step 2 above introduces opportunities for parallelization.
   * RFactor is a schedule primitive that implements the transformation described above.
   * \param loop_rv The loop outside block we want to do rfactor
   * \param factor_axis The position where the new dimension is placed in the new introduced rfactor
   *                    buffer. Suppose the original reduction block writes to buffer `B` with
   *                    ndim(B) dimensions, then `factor_axis` should be in range `[-ndim(B) - 1,
   *                    ndim(B)]`, and the negative index will be normalized to a non-negative one
   * \return The rfactor block
   */</doc>
<use f='tvm/src/meta_schedule/schedule_rule/add_rfactor.cc' l='100' u='c' c='_ZN3tvm13meta_schedule14AddRFactorNode5ApplyERKNS_3tir8ScheduleERKNS2_7BlockRVE'/>
<ovr f='tvm/src/tir/schedule/concrete_schedule.cc' l='657' c='_ZN3tvm3tir20ConcreteScheduleNode7RFactorERKNS0_6LoopRVEi'/>
<use f='tvm/src/tir/schedule/primitive/reduction.cc' l='1276' u='c' c='_ZN3tvm3tir13RFactorTraits23UnpackedApplyToScheduleENS0_8ScheduleENS0_6LoopRVENS_7IntegerE'/>
<use f='tvm/src/tir/schedule/schedule.cc' l='200' u='a'/>
