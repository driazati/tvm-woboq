<dec f='tvm/src/parser/meta_ref.h' l='76' type='tvm::relay::Expr tvm::parser::MetaRef(std::string type_key, uint64_t node_index)'/>
<def f='tvm/src/parser/meta_ref.cc' l='58' ll='64' type='tvm::relay::Expr tvm::parser::MetaRef(std::string type_key, uint64_t node_index)'/>
<doc f='tvm/src/parser/meta_ref.h' l='54'>/*! \brief A reference to a &quot;meta-expression&quot;.
 *
 * In the text format we allow referencing metadata which
 * uses a compact serialization that proceeds the main
 * program body.
 *
 * We can reference this table using an expression of
 * the form `meta[Type][index]`.
 *
 * We must later resolve these references to actual in-memory
 * AST nodes but this requires first parsing the full program
 * then expanding these temporary AST nodes into their corresponding
 * nodes.
 *
 * For example the nth large constant will be pretty-printed as meta[relay.Constant][n]
 * with its compact binary serialization residing in the metadata section at the end
 * of the program.
 *
 * \param type_key The type key of the object in the meta section.
 * \param node_index The index into that subfield.
 * \returns The meta table reference.
 */</doc>
<use f='tvm/src/parser/tokenizer.h' l='316' u='c' c='_ZN3tvm6parser9Tokenizer15TokenizeMetaRefEv'/>
