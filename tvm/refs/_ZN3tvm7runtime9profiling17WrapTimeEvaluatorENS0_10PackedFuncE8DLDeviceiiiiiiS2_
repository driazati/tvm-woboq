<dec f='tvm/include/tvm/runtime/profiling.h' l='586' type='tvm::runtime::PackedFunc tvm::runtime::profiling::WrapTimeEvaluator(tvm::runtime::PackedFunc f, tvm::Device dev, int number, int repeat, int min_repeat_ms, int limit_zero_time_iterations, int cooldown_interval_ms, int repeats_to_cooldown, tvm::runtime::PackedFunc f_preproc = nullptr)'/>
<doc f='tvm/include/tvm/runtime/profiling.h' l='540'>/*!
 * \brief Wrap a timer function to measure the time cost of a given packed function.
 *
 * Approximate implementation:
 * \code{.py}
 * f() // warmup
 * for i in range(repeat)
 *   f_preproc()
 *   while True:
 *     start = time()
 *     for j in range(number):
 *       f()
 *     duration_ms = time() - start
 *     if duration_ms &gt;= min_repeat_ms:
 *       break
 *     else:
 *        number = (min_repeat_ms / (duration_ms / number) + 1
 *   if cooldown_interval_ms and i % repeats_to_cooldown == 0:
 *     sleep(cooldown_interval_ms)
 * \endcode
 *
 * \param f The function argument.
 * \param dev The device.
 * \param number The number of times to run this function for taking average.
 *        We call these runs as one `repeat` of measurement.
 * \param repeat The number of times to repeat the measurement.
 *        In total, the function will be invoked (1 + number x repeat) times,
 *        where the first one is warm up and will be discarded.
 *        The returned result contains `repeat` costs,
 *        each of which is an average of `number` costs.
 * \param min_repeat_ms The minimum duration of one `repeat` in milliseconds.
 *        By default, one `repeat` contains `number` runs. If this parameter is set,
 *        the parameters `number` will be dynamically adjusted to meet the
 *        minimum duration requirement of one `repeat`.
 *        i.e., When the run time of one `repeat` falls below this time,
 *        the `number` parameter will be automatically increased.
 * \param limit_zero_time_iterations The maximum number of repeats when
 *        measured time is equal to 0.  It helps to avoid hanging during measurements.
 * \param cooldown_interval_ms The cooldown interval in milliseconds between the number of repeats
 *        defined by `repeats_to_cooldown`.
 * \param repeats_to_cooldown The number of repeats before the
 *        cooldown is activated.
 * \param f_preproc The function to be executed before we execute time
 *        evaluator.
 * \return f_timer A timer function.
 */</doc>
<use f='tvm/src/runtime/graph_executor/debug/graph_executor_debug.cc' l='139' u='c' c='_ZN3tvm7runtime18GraphExecutorDebug17RunIndividualNodeB5cxx11Eiiiiiii'/>
<def f='tvm/src/runtime/profiling.cc' l='863' ll='924' type='tvm::runtime::PackedFunc tvm::runtime::profiling::WrapTimeEvaluator(tvm::runtime::PackedFunc pf, tvm::Device dev, int number, int repeat, int min_repeat_ms, int limit_zero_time_iterations, int cooldown_interval_ms, int repeats_to_cooldown, tvm::runtime::PackedFunc f_preproc = nullptr)'/>
<use f='tvm/src/runtime/rpc/rpc_module.cc' l='397' u='c'/>
<use f='tvm/src/runtime/rpc/rpc_module.cc' l='411' u='c'/>
