<inh f='tvm/include/tvm/tir/stmt_functor.h' l='300' c='tvm::tir::StmtExprVisitor'/>
<def f='tvm/src/tir/transforms/narrow_datatype.cc' l='75' ll='198'/>
<use f='tvm/src/tir/transforms/narrow_datatype.cc' l='270'/>
<size>240</size>
<doc f='tvm/src/tir/transforms/narrow_datatype.cc' l='65'>// Determine the result dtype for Var, IntImm and Cast,
// which will be stored in `vmap` eventually.
//
// Algorithm:
// We propogate the dtypes of all the Exprs that contain Var `var` into `vmap[var]`.
// To be more specific, if for each Expr `e` which contains `var`
// (`var` is a child node of `e` in AST), `e` fits into `target_bits_`,
// then we narrow `var` into `target_bits_`. That is,
// `vmap[var] = min(target_bits_, var.dtype.bits())`
// Otherwise, `var` is not narrowed, that is, `vmap[var] = var.dtype.bits()`</doc>
<fun r='_ZN3tvm3tir15DataTypeVisitor9VisitExprERKNS_8PrimExprE'/>
<fun r='_ZN3tvm3tir15DataTypeVisitor10VisitStmt_EPKNS0_7ForNodeE'/>
<fun r='_ZN3tvm3tir15DataTypeVisitor10VisitStmt_EPKNS0_9BlockNodeE'/>
<fun r='_ZN3tvm3tir15DataTypeVisitor10VisitStmt_EPKNS0_12AttrStmtNodeE'/>
<fun r='_ZN3tvm3tir15DataTypeVisitor10VisitExpr_EPKNS0_10ReduceNodeE'/>
<fun r='_ZN3tvm3tir15DataTypeVisitor10VisitExpr_EPKNS0_7VarNodeE'/>
<fun r='_ZN3tvm3tir15DataTypeVisitor10VisitExpr_EPKNS_10IntImmNodeE'/>
<fun r='_ZN3tvm3tir15DataTypeVisitor10VisitExpr_EPKNS0_8CastNodeE'/>
