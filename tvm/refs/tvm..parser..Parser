<def f='tvm/src/parser/parser.cc' l='274' ll='1881'/>
<use f='tvm/src/parser/parser.cc' l='1883' c='_ZN3tvm6parser10InitParserERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES8_RKNS_7runtime8OptionalINS_8IRModuleEEERKNS9_3MapINS9_6StringENS9_512223913'/>
<use f='tvm/src/parser/parser.cc' l='1919' c='_ZN3tvm6parser10InitParserERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES8_RKNS_7runtime8OptionalINS_8IRModuleEEERKNS9_3MapINS9_6StringENS9_512223913'/>
<size>576</size>
<doc f='tvm/src/parser/parser.cc' l='236'>/*! \brief The parser class is the main interface to the parser.
 * the parser is not currently exposed beyond this .cc file.
 *
 * The parser is initialized with a diagnostic context, an
 * operator table, and a token stream.
 *
 * The rest of the internal state is used to map the human readable
 * form to in-memory IR representation.
 *
 * The main entry point to the parser are a set of parsing methods
 * such as `ParseModule` and `ParseExpr`.
 *
 * As with traditional recursive descent parsers the parsing methods
 * are factored recursively just as one would do with a formal language
 * grammar.
 *
 * You can view a recursive descent parser as a human friendly way to specify
 * a state machine, and thus this factoring is necessary as the &apos;state&apos; of this
 * machine is the combination of the current parsing method and the next token.
 *
 * Parsing proceeds by matching a token and then dispatching to the appropriate
 * method to parse the next tokens in the stream.
 *
 * For example if we are parsing a type and encounter a &quot;Tensor&quot; token we switch
 * into a mode for parsing `[`, a shape, a comma, a data type and then a `]`.
 *
 * Certain matches like this are unambiguous and proceed in a straight line fashion
 * once the initial token is found. Other parsing is more complex and requires some
 * tricks to correctly parse.
 *
 * For example when we find a &apos;(&apos; in an expression context, it may be part of
 * a tuple, the arguments to a call, or a parenthesized expression. The below code
 * disambiguate these cases by factoring expression parsing into a series of methods
 * which encode the parsing context and thus how to interpret the parenthesis.
 *
 * For more information one should be able to read the code in order starting with
 * `ParseModule` or `ParseExpr`.
 */</doc>
