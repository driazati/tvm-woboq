<inh f='tvm/include/tvm/tir/stmt_functor.h' l='314' c='tvm::tir::StmtExprMutator'/>
<def f='tvm/src/tir/transforms/bf16_legalize.cc' l='123' ll='144'/>
<use f='tvm/src/tir/transforms/bf16_legalize.cc' l='357' c='_ZN3tvm3tir9transform19BF16CastEliminationEv'/>
<size>24</size>
<doc f='tvm/src/tir/transforms/bf16_legalize.cc' l='112'>/*
 * Eliminate verbose casting between fp32 and bf16
 * Checks if the AST has the pattern:
 *     castto32(castto16(some_fp32_op(...)))
 * The verbose casting is generated by BF16Promote for multiple
 * bf16 Ops in a row. e.g.:
 *  X[i] + Y[i] + T[i] =&gt;
 *  bf16((float32(bf16((float32(X[i]) + float32(Y[i])))) + float32(T[i])))
 * After this pass:
 *  bf16(float32(X[i]) + float32(Y[i]) + float32(T[i]))
 */</doc>
<fun r='_ZN3tvm3tir27BF16CastEliminationRewriter10VisitExpr_EPKNS0_8CastNodeE'/>
