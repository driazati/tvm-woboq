<inh f='tvm/include/tvm/runtime/object.h' l='167' c='tvm::runtime::Object'/>
<def f='tvm/src/relay/collage/sub_graph.h' l='232' ll='371'/>
<use f='tvm/src/relay/collage/sub_graph.h' l='348' c='_ZNK3tvm5relay7collage12SubGraphNodeeqERKS2_'/>
<use f='tvm/src/relay/collage/sub_graph.h' l='349' c='_ZNK3tvm5relay7collage12SubGraphNodeneERKS2_'/>
<use f='tvm/src/relay/collage/sub_graph.h' l='350' c='_ZNK3tvm5relay7collage12SubGraphNodeltERKS2_'/>
<use f='tvm/src/relay/collage/sub_graph.h' l='428' c='_ZNK3tvm5relay7collage8SubGraphptEv'/>
<use f='tvm/src/relay/collage/sub_graph.h' l='428' c='_ZNK3tvm5relay7collage8SubGraphptEv'/>
<use f='tvm/src/relay/collage/sub_graph.h' l='428' c='_ZNK3tvm5relay7collage8SubGraph3getEv'/>
<use f='tvm/src/relay/collage/sub_graph.h' l='428'/>
<size>264</size>
<doc f='tvm/src/relay/collage/sub_graph.h' l='179'>/*!
 * \brief A compact representation of a sub-graph within an (implied) overall Relay expression.
 *
 * Sub-graphs can be used to represent partitions/kernels/composite functions without having to
 * pay the cost of constructing or rewriting any expressions. We also allow &apos;extracting&apos; a
 * function to use for measuring a partition/kernel&apos;s latency independently from &apos;rewriting&apos;
 * the overall Relay expression since only a tiny subset of candidate partitions will end up being
 * needed after Collage has completed its search.
 *
 * We expect O(thousands) of sub-graphs to be in flight while processing a given model, so we are
 * mindful of space overhead.
 *
 * A sub-graph classifies every dataflow node of the overall expression as either &apos;inside&apos; or
 * &apos;outside&apos; the sub-graph. Obviously not all such divisions make sense, for example it is not
 * valid for an inside node to feed into another inside node via outside nodes. We provide the
 * \p IsValid method to check for validity, and \p SubGraphConfig to control which validity rules
 * apply (such as maximum depth).
 *
 * We generally work with the \p DataflowGraph representation of the overall Relay expression
 * rather than the expression itself. We use the post-dfs visit index to uniquely refer to
 * expression nodes.
 *
 * As well as &apos;inside&apos; and &apos;outside&apos; we have four other flavors of dataflow nodes, all uniquely
 * determined from the &apos;inside&apos; nodes:
 *  - &apos;entry&apos; nodes are those inside with at least one dataflow input outside.
 *  - &apos;exit&apos; nodes are  those inside with at least one dataflow output outside, or which
 *    are considered &apos;external&apos; in the underlying dataflow graph (eg because they represent
 *    the result of the overall function).
 *  - &apos;input&apos; nodes are those outside with at least one dataflow output inside.
 *  - &apos;output&apos; nodes are those outside with at least one dataflow input inside.
 * Index sets for these are cached with the sub-graph for performance.
 *
 * It is valid to have multiple entry nodes (we can bind a parameter for each). It may be valid to
 * have multiple exit nodes (we can build a tuple of all such). It may be valid to have exit nodes
 * which also contribute to other inside nodes (ie represent a &apos;tap&apos; on an intermediate result).
 *
 * Sub-graphs are closed under:
 *  - Disjoint union.
 *  - Wrapping by a function with given attributes (see \p NestedSubGraph above). This can be used
 *    to encode &quot;Composite&quot; functions, or to represent a candidate kernel within a &quot;Primitive&quot;
 *    function. (By combining &apos;wrapping&apos; with &apos;union&apos; we can encode, eg, &apos;this sub-graph should
 *    be placed inside a primitive function which itself may have calls to composite functions).
 *  - Substitution, which allows a sub-graph w.r.t. one dataflow graph to be transformed to
 *    match some other (typically smaller) dataflow graph.
 *
 * See the subclasses of \p PartitionRule for how sub-graphs are built and combined during Collage
 * search.
 *
 * To support some of the \p OpPatternKind-based fusion rule processing we give sub-graphs
 * a kind, which is generally the maximum of the kinds of all the operator calls appearing
 * inside it. We also given sub-graphs a (not necessarily unique) label to help debugging
 * and guide the selection of global symbol names.
 */</doc>
<mbr r='tvm::relay::collage::SubGraphNode::inside_' o='128' t='tvm::relay::collage::IndexSet'/>
<mbr r='tvm::relay::collage::SubGraphNode::first_inside_index_' o='448' t='tvm::relay::PostDfsIndex'/>
<mbr r='tvm::relay::collage::SubGraphNode::last_inside_index_' o='512' t='tvm::relay::PostDfsIndex'/>
<mbr r='tvm::relay::collage::SubGraphNode::entry_' o='576' t='tvm::relay::collage::IndexSet'/>
<mbr r='tvm::relay::collage::SubGraphNode::exit_' o='896' t='tvm::relay::collage::IndexSet'/>
<mbr r='tvm::relay::collage::SubGraphNode::input_' o='1216' t='tvm::relay::collage::IndexSet'/>
<mbr r='tvm::relay::collage::SubGraphNode::output_' o='1536' t='tvm::relay::collage::IndexSet'/>
<mbr r='tvm::relay::collage::SubGraphNode::depth_' o='1856' t='size_t'/>
<mbr r='tvm::relay::collage::SubGraphNode::kind_' o='1920' t='tvm::relay::OpPatternKind'/>
<mbr r='tvm::relay::collage::SubGraphNode::label_' o='1984' t='tvm::runtime::String'/>
<mbr r='tvm::relay::collage::SubGraphNode::nested_sub_graphs_' o='2048' t='tvm::relay::collage::NestedSubGraphs'/>
<fun r='_ZN3tvm5relay7collage12SubGraphNode10VisitAttrsEPNS_11AttrVisitorE'/>
<fun r='_ZNK3tvm5relay7collage12SubGraphNode12overall_sizeEv'/>
<fun r='_ZNK3tvm5relay7collage12SubGraphNode7IsEmptyEv'/>
<fun r='_ZNK3tvm5relay7collage12SubGraphNode4SizeEv'/>
<fun r='_ZNK3tvm5relay7collage12SubGraphNode10DownstreamERKNS1_13DataflowGraphE'/>
<fun r='_ZNK3tvm5relay7collage12SubGraphNode7IsValidERKNS1_13DataflowGraphERKNS1_14SubGraphConfigE'/>
<fun r='_ZNK3tvm5relay7collage12SubGraphNode17ExtractAsFunctionERKNS1_13DataflowGraphE'/>
<fun r='_ZNK3tvm5relay7collage12SubGraphNode7RewriteERKNS1_13DataflowGraphERKNS_9RelayExprE'/>
<fun r='_ZNK3tvm5relay7collage12SubGraphNode8ToStringB5cxx11Ev'/>
<fun r='_ZNK3tvm5relay7collage12SubGraphNodeeqERKS2_'/>
<fun r='_ZNK3tvm5relay7collage12SubGraphNodeneERKS2_'/>
<fun r='_ZNK3tvm5relay7collage12SubGraphNodeltERKS2_'/>
<fun r='_ZNK3tvm5relay7collage12SubGraphNode4hashEv'/>
<fun r='_ZN3tvm5relay7collage12SubGraphNode4InitERKNS1_13DataflowGraphE'/>
<fun r='_ZNK3tvm5relay7collage12SubGraphNode5DepthERKNS1_13DataflowGraphE'/>
<fun r='_ZNK3tvm5relay7collage12SubGraphNode15AnyInputOutsideEPKNS0_12IndexedGraphINS_9RelayExprEE4NodeE'/>
<fun r='_ZNK3tvm5relay7collage12SubGraphNode14AnyInputInsideEPKNS0_12IndexedGraphINS_9RelayExprEE4NodeE'/>
<fun r='_ZNK3tvm5relay7collage12SubGraphNode16AnyOutputOutsideEPKNS0_12IndexedGraphINS_9RelayExprEE4NodeE'/>
<fun r='_ZNK3tvm5relay7collage12SubGraphNode15AnyOutputInsideEPKNS0_12IndexedGraphINS_9RelayExprEE4NodeE'/>
<smbr r='tvm::relay::collage::SubGraphNode::_type_key' t='const char *const'/>
<smbr r='tvm::relay::collage::SubGraphNode::_type_final' t='const bool'/>
<smbr r='tvm::relay::collage::SubGraphNode::_type_child_slots' t='const int'/>
<fun r='_ZN3tvm5relay7collage12SubGraphNode16RuntimeTypeIndexEv'/>
<fun r='_ZN3tvm5relay7collage12SubGraphNode27_GetOrAllocRuntimeTypeIndexEv'/>
<use f='tvm/src/relay/collage/sub_graph.cc' l='59' c='_ZN3tvm5relay7collage12_GLOBAL__N_19ExtractorC1EPKNS1_13DataflowGraphEPKNS1_12SubGraphNodeENS_7runtime3MapINSA_6StringENSA_9ObjectRefEvvEE'/>
<use f='tvm/src/relay/collage/sub_graph.cc' l='269'/>
<use f='tvm/src/relay/collage/sub_graph.cc' l='585'/>
<use f='tvm/src/relay/collage/sub_graph.cc' l='585'/>
<use f='tvm/src/relay/collage/sub_graph.cc' l='585'/>
<use f='tvm/src/relay/collage/sub_graph.cc' l='703' c='_ZNK3tvm5relay7collage12SubGraphNodeeqERKS2_'/>
<use f='tvm/src/relay/collage/sub_graph.cc' l='719' c='_ZNK3tvm5relay7collage12SubGraphNodeltERKS2_'/>
<use f='tvm/src/relay/collage/sub_graph.cc' l='828' c='_ZN3tvm5relay7collage8SubGraphC1ERKNS1_13DataflowGraphENS1_8IndexSetENS0_13OpPatternKindENS_7runtime6StringESt6vectorINS1_14NestedSubGraphESaISB_EE'/>
<size>264</size>
<fun r='_ZN3tvm5relay7collage12SubGraphNode10VisitAttrsEPNS_11AttrVisitorE'/>
<fun r='_ZNK3tvm5relay7collage12SubGraphNode10DownstreamERKNS1_13DataflowGraphE'/>
<fun r='_ZNK3tvm5relay7collage12SubGraphNode7IsValidERKNS1_13DataflowGraphERKNS1_14SubGraphConfigE'/>
<fun r='_ZNK3tvm5relay7collage12SubGraphNode17ExtractAsFunctionERKNS1_13DataflowGraphE'/>
<fun r='_ZNK3tvm5relay7collage12SubGraphNode7RewriteERKNS1_13DataflowGraphERKNS_9RelayExprE'/>
<fun r='_ZNK3tvm5relay7collage12SubGraphNode8ToStringB5cxx11Ev'/>
<fun r='_ZNK3tvm5relay7collage12SubGraphNodeeqERKS2_'/>
<fun r='_ZNK3tvm5relay7collage12SubGraphNodeltERKS2_'/>
<fun r='_ZNK3tvm5relay7collage12SubGraphNode4hashEv'/>
<fun r='_ZN3tvm5relay7collage12SubGraphNode4InitERKNS1_13DataflowGraphE'/>
<fun r='_ZNK3tvm5relay7collage12SubGraphNode5DepthERKNS1_13DataflowGraphE'/>
<fun r='_ZNK3tvm5relay7collage12SubGraphNode15AnyInputOutsideEPKNS0_12IndexedGraphINS_9RelayExprEE4NodeE'/>
<fun r='_ZNK3tvm5relay7collage12SubGraphNode14AnyInputInsideEPKNS0_12IndexedGraphINS_9RelayExprEE4NodeE'/>
<fun r='_ZNK3tvm5relay7collage12SubGraphNode16AnyOutputOutsideEPKNS0_12IndexedGraphINS_9RelayExprEE4NodeE'/>
<fun r='_ZNK3tvm5relay7collage12SubGraphNode15AnyOutputInsideEPKNS0_12IndexedGraphINS_9RelayExprEE4NodeE'/>
