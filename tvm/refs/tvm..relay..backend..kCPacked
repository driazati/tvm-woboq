<dec f='tvm/src/relay/backend/utils.h' l='107' type='1'/>
<doc f='tvm/src/relay/backend/utils.h' l='86'>/*!
   * \brief Directly call a TVMBackendPackedCFunc named according to the tir::Call.
   *
   * When this type is selected, assumes all operators are implemented in functions of type
   * `TVMBackendPackedCFunc` and should be called directly. That is, presumes at the time of
   * downstream compilation that there is a symbol named after the 0th arg to tir::Call of
   * type `TVMBackendPackedCFunc`. This situation should occur when target_host == target.
   *
   * The following code is emitted at call sites to call a function named `func`:
   * func(values, tcodes, num_args, ret_values, ret_tcodes, resource_handle)
   *
   * The arguments given to the tir::Call node are encoded into `values`, `tcodes`, and `num_args`
   * by LowerTVMBuiltin TIR transform.
   *
   * `resource_handle` is encoded as the final argument to the tir::Call node. In practice, it is
   * always the device context parameter when not null. At present, the implementation does not
   * support forwarding device context parameters to CPacked.
   *
   * Compatible with the C runtime and C++ runtime (so long as target_host == target). Implemented
   * in the same scenarios.
   */</doc>
<doc f='tvm/src/relay/backend/utils.h' l='107'>// Emit tir.call_cpacked and wrap all arguments in DLTensor.</doc>
<use f='tvm/src/relay/backend/aot/aot_lower_main.cc' l='637' c='_ZN3tvm5relay7backend3aot14AOTMainLowerer14CreateFuncCallENS0_16CallLoweredPropsERKNS_9RelayExprE'/>
