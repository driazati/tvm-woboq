<inh f='tvm/include/tvm/runtime/object.h' l='167' c='tvm::runtime::Object'/>
<def f='tvm/include/tvm/arith/analyzer.h' l='180' ll='198'/>
<use f='tvm/include/tvm/arith/analyzer.h' l='192' c='_ZNK3tvm5arith14ModularSetNode12SEqualReduceEPKS1_NS_13SEqualReducerE'/>
<use f='tvm/include/tvm/arith/analyzer.h' l='208' c='_ZNK3tvm5arith10ModularSetptEv'/>
<use f='tvm/include/tvm/arith/analyzer.h' l='208' c='_ZNK3tvm5arith10ModularSetptEv'/>
<use f='tvm/include/tvm/arith/analyzer.h' l='208' c='_ZNK3tvm5arith10ModularSet3getEv'/>
<use f='tvm/include/tvm/arith/analyzer.h' l='208'/>
<size>32</size>
<doc f='tvm/include/tvm/arith/analyzer.h' l='168'>/*!
 * \brief Range of a linear integer function.
 *  Use to do specify the possible index values.
 *
 *  set = { coeff * x + base | x in Z }
 *
 *  When coeff != 0, it can also be written as
 *  set = { n | n % coeff == base }
 *
 *  This is useful to decide if the index is dividable by certain value.
 *  For example, if index = 0 + 4 x, then we know it can be divided by 4.
 */</doc>
<mbr r='tvm::arith::ModularSetNode::coeff' o='128' t='int64_t'/>
<mbr r='tvm::arith::ModularSetNode::base' o='192' t='int64_t'/>
<fun r='_ZN3tvm5arith14ModularSetNode10VisitAttrsEPNS_11AttrVisitorE'/>
<fun r='_ZNK3tvm5arith14ModularSetNode12SEqualReduceEPKS1_NS_13SEqualReducerE'/>
<smbr r='tvm::arith::ModularSetNode::_type_key' t='const char *const'/>
<smbr r='tvm::arith::ModularSetNode::_type_final' t='const bool'/>
<smbr r='tvm::arith::ModularSetNode::_type_child_slots' t='const int'/>
<fun r='_ZN3tvm5arith14ModularSetNode16RuntimeTypeIndexEv'/>
<fun r='_ZN3tvm5arith14ModularSetNode27_GetOrAllocRuntimeTypeIndexEv'/>
<use f='tvm/src/arith/modular_set.cc' l='41'/>
<use f='tvm/src/arith/modular_set.cc' l='41'/>
<use f='tvm/src/arith/modular_set.cc' l='41'/>
<use f='tvm/src/arith/modular_set.cc' l='44' c='_ZN3tvm5arith10ModularSetC1Ell'/>
<use f='tvm/src/arith/modular_set.cc' l='52'/>
<use f='tvm/src/arith/modular_set.cc' l='53'/>
<size>32</size>
