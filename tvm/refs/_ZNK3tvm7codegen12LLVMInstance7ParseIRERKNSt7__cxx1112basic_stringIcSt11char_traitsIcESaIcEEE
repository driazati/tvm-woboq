<dec f='tvm/src/target/llvm/llvm_instance.h' l='114' type='std::unique_ptr&lt;llvm::Module&gt; tvm::codegen::LLVMInstance::ParseIR(const std::string &amp; llvm_ir) const'/>
<doc f='tvm/src/target/llvm/llvm_instance.h' l='106'>/*!
   * \brief Create `llvm::Module` from a string.
   *
   * Parse the string in \param llvm_ir, and return the `llvm::Module`.
   * At the moment this function will abort if the parsing fails.
   * \param llvm_ir string with the LLVM IR assembly or bitcode
   * \return created `llvm::Module`
   */</doc>
<use f='tvm/src/target/llvm/codegen_llvm.cc' l='321' u='c' c='_ZN3tvm7codegen11CodeGenLLVM12HandleImportERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE'/>
<use f='tvm/src/target/llvm/codegen_llvm.cc' l='1175' u='c' c='_ZN3tvm7codegen11CodeGenLLVM29EmitFloat16ConversionBuiltinsEb'/>
<def f='tvm/src/target/llvm/llvm_instance.cc' l='117' ll='121' type='std::unique_ptr&lt;llvm::Module&gt; tvm::codegen::LLVMInstance::ParseIR(const std::string &amp; llvm_ir) const'/>
