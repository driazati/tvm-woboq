<dec f='tvm/src/tir/transforms/common_subexpr_elim_tools.h' l='127' type='static std::vector&lt;PrimExpr&gt; tvm::tir::DirectSubexpr::GetDirectSubexpressions(const tvm::PrimExpr &amp; expr, std::function&lt;bool (const PrimExpr &amp;)&gt; is_eligible_computation, std::function&lt;bool (const PrimExpr &amp;)&gt; can_contain_computations)'/>
<use f='tvm/src/tir/transforms/common_subexpr_elim.cc' l='336' u='c' c='_ZN3tvm3tir29CommonSubexpressionEliminator9VisitExprERKNS_8PrimExprE'/>
<use f='tvm/src/tir/transforms/common_subexpr_elim.cc' l='517' u='c' c='_ZN3tvm3tir29CommonSubexpressionEliminator9VisitStmtERKNS0_4StmtE'/>
<doc f='tvm/src/tir/transforms/common_subexpr_elim_tools.h' l='126'>// Toplevel (static) function</doc>
<def f='tvm/src/tir/transforms/common_subexpr_elim_tools.cc' l='596' ll='603' type='static std::vector&lt;PrimExpr&gt; tvm::tir::DirectSubexpr::GetDirectSubexpressions(const tvm::PrimExpr &amp; expr, std::function&lt;bool (const PrimExpr &amp;)&gt; is_eligible_computation, std::function&lt;bool (const PrimExpr &amp;)&gt; can_contain_computations)'/>
<doc f='tvm/src/tir/transforms/common_subexpr_elim_tools.cc' l='587'>/*!
 * \brief Toplevel (static) function that returns the direct subexpressions of a given expression
 * \param expr The expression to analyze.
 * \param is_eligible_computation The predicate which decides if an expression is eligible for
                                  being introduced in a new variable
 * \param can_contain_computations The predicate which decides if an expression can contain an
                                    eligible computation
 * \return A vector of PrimExpr containing the direct subexpressions of `expr`
 */</doc>
