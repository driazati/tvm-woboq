<def f='include/c++/12/bits/atomic_futex.h' l='126' ll='148' type='unsigned int std::__atomic_futex_unsigned::_M_load_and_test_until_steady(unsigned int __assumed, unsigned int __operand, bool __equal, std::memory_order __mo, bool __has_timeout, chrono::seconds __s, chrono::nanoseconds __ns)'/>
<use f='include/c++/12/bits/atomic_futex.h' l='189' u='c' c='_ZNSt23__atomic_futex_unsigned27_M_load_and_test_until_implEjjbSt12memory_orderRKNSt6chrono10time_pointINS1_3_V212steady_clockETL0__EE'/>
<doc f='include/c++/12/bits/atomic_futex.h' l='120'>// If a timeout occurs, returns a current value after the timeout;
    // otherwise, returns the operand&apos;s value if equal is true or a different
    // value if equal is false.
    // The assumed value is the caller&apos;s assumption about the current value
    // when making the call.
    // __s and __ns are measured against CLOCK_MONOTONIC.</doc>
