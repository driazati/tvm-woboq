<def f='tvm/tir/schedule/primitive/for_kind.cc' l='80' ll='109' type='void tvm::tir::CheckLoopParallelizableInBlock(const tvm::tir::ScheduleState &amp; self, tvm::tir::ForKind for_kind, const tvm::tir::Var &amp; loop_var, const tvm::tir::BlockRealize &amp; block_realize, runtime::ThreadScope thread_scope)'/>
<use f='tvm/tir/schedule/primitive/for_kind.cc' l='130' u='c' c='_ZN3tvm3tir22CheckParallelizabilityERKNS0_13ScheduleStateERKNS0_3ForENS0_7ForKindENS_7runtime11ThreadScopeE'/>
<doc f='tvm/tir/schedule/primitive/for_kind.cc' l='62'>/*!
 * \brief Check if a loop can be parallelized/vectorized/bound with regard to a specific block
 * \details There are two conditions:
 * 1) The block is required to have affine bindings, and
 * 2) For each block iter whose binding contains the input loop variable, either
 *   - the block iter is data parallel, or
 *   - the block iter is a reduction block iter, and the input `thread_tag` starts with &quot;threadIdx&quot;
 *   in case of cross-thread reduction.
 * \param self The schedule state
 * \param for_kind The desired ForKind (only `kParallel`, `kVectorized` and `kThreadBinding` are
 * allowed)
 * \param loop_var The loop variable of the loop to be checked
 * \param block_realize The block-realize of the block to be checked
 * \param thread_scope The thread scope of the thread axis to be bound, which is an invalid value if
 * the operation is not &quot;bind&quot;
 * \throws ScheduleError If the input loop cannot be parallelized/vectorized/bound with regard to
 * the input block
 */</doc>
