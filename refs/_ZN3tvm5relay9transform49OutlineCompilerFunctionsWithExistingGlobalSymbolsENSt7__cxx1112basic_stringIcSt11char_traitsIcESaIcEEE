<dec f='tvm/relay/transforms/compiler_function_utils.h' l='122' type='tvm::transform::Pass tvm::relay::transform::OutlineCompilerFunctionsWithExistingGlobalSymbols(std::string compiler_filter = &quot;&quot;)'/>
<use f='tvm/relay/backend/contrib/codegen_c/codegen.cc' l='396' u='c' c='_ZN3tvm5relay7contrib13CCompilerPassEv'/>
<doc f='tvm/relay/transforms/compiler_function_utils.h' l='111'>/*!
 * \brief A pass to outline all let-bound and literal functions in direct call positions which have
 * a &quot;Compiler&quot; attribute. The functions are bound to unique global vars according to their
 * existing &quot;global_symbol&quot; attribute. At most one function with the same global symbol is outlined.
 *
 * If \p compiler_filter is non-empty only functions with that as their attribute value are
 * outlined.
 *
 * This pass may be useful for external codegen using the &quot;RelayToTIR&quot; custom pass mechanism
 * to prepare the IRModule before custom lowering.
 */</doc>
<def f='tvm/relay/transforms/compiler_function_utils.cc' l='237' ll='241' type='tvm::transform::Pass tvm::relay::transform::OutlineCompilerFunctionsWithExistingGlobalSymbols(std::string compiler_filter = &quot;&quot;)'/>
<use f='tvm/relay/transforms/compiler_function_utils.cc' l='292' u='r'/>
<doc f='tvm/relay/transforms/compiler_function_utils.cc' l='236'>// Any Java programmers in the house?</doc>
