<def f='tvm/tir/transforms/storage_rewrite.cc' l='1341' ll='1634'/>
<use f='tvm/tir/transforms/storage_rewrite.cc' l='1646' c='_ZN3tvm3tir23PointerValueTypeRewriteENS0_8PrimFuncEbbbbbbb'/>
<size>144</size>
<doc f='tvm/tir/transforms/storage_rewrite.cc' l='1317'>/* \brief Rewrites buffer/pointer variables from scalar types to vectorized
 * types.
 *
 * Some runtimes do not allow casting between composite types and the underlying
 * base type (e.g. Vulkan, casting from 1-lane float16* to 4-lane float16x4*).
 * In these cases, in order to have vectorized load/store on an array, the
 * element type of that array must be vectorized.  This is in contrast to C-style
 * runtimes, in which `float16x4* vec = *(float16x4*)(float_arr + offset)` is
 * valid.
 *
 * By default, VectorTypeRewriter will attempt to rewrite all buffer variables to
 * vectorized access, if the load/store occurring in the PrimFunc are all
 * vectorized.  This includes adjusting the indices being used to access the
 * array.  (e.g. If `float16* scalar_arr` is being converted to `float16x4*
 * vec_arr`, then `scalar_arr[Ramp(offset, 1, 4)]` will be converted to
 * `vec_arr[offset/4]`.)
 *
 * Currently, several of the C-style runtimes do not support buffers whose
 * elements are vectorized types, or rely on the presence of the Ramp nodes to
 * identify vectorized loads.  The boolean parameters in the constructor are to
 * mimic the previous behavior of VectorTypeRewriter, to avoid breaking these
 * runtimes.  Once all runtimes support vectorized buffer elements, these
 * parameters can be removed.
 */</doc>
<fun r='_ZN3tvm3tir18VectorTypeRewriterC1ERKSt13unordered_mapIPKNS0_7VarNodeENS0_13BufferVarInfoESt4hashIS5_ESt8equal_toIS5_ESaISt4pairIKS5_S6_EEEbbbbbb'/>
<fun r='_ZN3tvm3tir18VectorTypeRewriter10VisitExpr_EPKNS0_8LoadNodeE'/>
<fun r='_ZN3tvm3tir18VectorTypeRewriter10VisitStmt_EPKNS0_9StoreNodeE'/>
<fun r='_ZN3tvm3tir18VectorTypeRewriter17VisitBufferAccessET_'/>
<fun r='_ZN3tvm3tir18VectorTypeRewriter10VisitExpr_EPKNS0_14BufferLoadNodeE'/>
<fun r='_ZN3tvm3tir18VectorTypeRewriter10VisitStmt_EPKNS0_15BufferStoreNodeE'/>
<fun r='_ZN3tvm3tir18VectorTypeRewriter10VisitStmt_EPKNS0_11LetStmtNodeE'/>
<fun r='_ZN3tvm3tir18VectorTypeRewriter11RemapBufferENS0_6BufferE'/>
<fun r='_ZN3tvm3tir18VectorTypeRewriter10VisitExpr_EPKNS0_8CallNodeE'/>
<fun r='_ZN3tvm3tir18VectorTypeRewriter10VisitStmt_EPKNS0_12AllocateNodeE'/>
<fun r='_ZN3tvm3tir18VectorTypeRewriter10VisitStmt_EPKNS0_17AllocateConstNodeE'/>
<fun r='_ZN3tvm3tir18VectorTypeRewriter8FinalizeEPNS0_8PrimFuncE'/>
<mbr r='tvm::tir::VectorTypeRewriter::rewrite_indices_' o='192' t='bool'/>
<mbr r='tvm::tir::VectorTypeRewriter::rewrite_map_' o='256' t='std::unordered_map&lt;const VarNode *, RewriteInfo&gt;'/>
<mbr r='tvm::tir::VectorTypeRewriter::buffer_map_' o='704' t='std::unordered_map&lt;const BufferNode *, Buffer&gt;'/>
